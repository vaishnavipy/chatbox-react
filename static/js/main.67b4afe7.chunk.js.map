{"version":3,"sources":["App.js","index.js"],"names":["App","useState","chatDiv","setChatDiv","chatIndex","setChatIndex","chatArr","emoji","chat","parentVariant","animate","initial","circle","scale","populate","map","item","index","div","transition","type","stiffness","damping","className","variants","staggerChildren","delayChildren","duration","repeat","Infinity","repeatType","length","marginClass","prevCount","useEffect","setTimeout","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67b4afe7.chunk.js","sourcesContent":["\nimport './App.css';\nimport { motion, useSpring } from \"framer-motion\"\nimport React, { Fragment, useEffect, useState } from \"react\"\n\n\nfunction App() {\n\n  const [chatDiv,setChatDiv] = useState(\"\")\n\n  const [chatIndex,setChatIndex] = useState(0)\n\n  \n\n  const chatArr =[\n    {emoji:\"frog\",\n      chat : \"How do I get better at React?\"},\n\n    {emoji:\"oct\",\n      chat :\"Just build something !\"},\n\n    {emoji:\"frog\",\n    chat :\"Okay ! What should I build ?\"},\n\n    {emoji:\"oct\",\n      chat : \"IDK, Just google it..\"},\n    \n    {emoji:\"frog\",\n    chat :\"Oh, this github profile looks cool !\"},\n\n    {emoji:\"oct\",\n      chat : \"Send me the link ?\"},\n    \n    {emoji:\"frog\",\n    chat : \"https://github.com/vaishnavipy?tab=repositories\"}\n\n  \n    ]\n\n    const parentVariant ={\n     animate:{},\n     initial:{},\n     \n    }\n\n    const circle={\n      initial :{scale:0.2},\n      animate:{scale:[0.4,0.6,0.8,1]}\n    \n    }\n\n \n    function populate(){\n\n      setChatDiv(chatArr.map((item,index)=>{\n\n        //First time bounce effect\n        if(chatIndex == 0 && index == chatIndex){\n\n          return(\n            <Fragment>\n            <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{\n              type: \"spring\",\n              stiffness: 260,\n              damping: 20\n            }}\n            className=\"grid\"\n          >\n           \n            <div className=\"icon\">üê∏</div>\n            <div key={index} className=\"frog-chat chat\">{item.chat}</div>\n            <div></div>\n          </motion.div>\n         \n          <motion.div className=\"load-container left\" animate=\"animate\" initial=\"initial\" variants={parentVariant}   transition={{staggerChildren: 0.3,delayChildren: 0.2,duration:0.2}}>\n             <motion.div className=\"circle\" variants={circle}   transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n             <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n             <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}> </motion.div>\n           </motion.div>\n            </Fragment>\n         \n          )\n\n        }\n\n        //Fill in the normal chat\n        if(index < chatIndex){\n\n          if(item.emoji == \"frog\"){\n\n        return(  <div  className=\"grid\" >\n          <div className=\"icon\">üê∏</div>\n          <div key={index} className=\"frog-chat chat\">{item.chat}</div>\n          <div></div>\n        </div>)\n\n        }\n        else{\n        \n          return( \n            <div className=\"grid\" >\n                <div></div>\n                <div key={index} className=\"oct-chat chat\">{item.chat}</div>\n                <div className=\"icon\">üêô</div>\n              </div>)\n\n        }\n\n\n        }\n        //Attach a animated loader with every conversation, and remove it when you render next time\n        if(index == chatIndex && chatIndex != chatArr.length){\n          let marginClass;\n          item.emoji == \"frog\" ?  marginClass=\"right\" :marginClass=\"left\";\n          return ( <motion.div className={`load-container ${marginClass}`} animate=\"animate\" initial=\"initial\" variants={parentVariant}   transition={{staggerChildren: 0.3,delayChildren: 0.2,duration:2}}>\n          <motion.div className=\"circle\" variants={circle}   transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n          <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n          <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}> </motion.div>\n        </motion.div>)\n        }\n      }) \n      \n      ) \n      setChatIndex(prevCount => prevCount+1)\n\n    }\n\n    useEffect(()=>{\n      \n      //Because we want the first chat to bounce first time, we call index 1 two times, without little time out \n      if(chatIndex ==1){\n        setTimeout(populate,200)\n      }\n      \n      //We want first index to have bounce effext, only at component mount, rest of the time the time-out is the sames\n      else if(chatIndex < 8){\n          console.log(chatIndex)\n        setTimeout(populate,1500)\n       \n        //To make animation repeat , set chatIndex to 0\n        }else if(chatIndex==8){\n          setChatIndex(0)\n        }\n      \n      \n    },[chatIndex])\n\n\n  return (\n    \n    <div className=\"main-container\">\n      \n   {chatDiv}\n  \n    </div>\n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n \n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}