[{"/Users/vaishnaviravichandran/Desktop/React/my-animated-chatbox/src/index.js":"1","/Users/vaishnaviravichandran/Desktop/React/my-animated-chatbox/src/App.js":"2"},{"size":395,"mtime":1607632812355,"results":"3","hashOfConfig":"4"},{"size":4550,"mtime":1607711158431,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"11mdkfo",{"filePath":"9","messages":"10","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/vaishnaviravichandran/Desktop/React/my-animated-chatbox/src/index.js",[],["12","13"],"/Users/vaishnaviravichandran/Desktop/React/my-animated-chatbox/src/App.js",["14","15","16","17","18","19","20","21","22","23","24"],"\nimport './App.css';\nimport { motion, useSpring } from \"framer-motion\"\nimport React, { Fragment, useEffect, useState } from \"react\"\n\n\nfunction App() {\n\n  const [chatDiv,setChatDiv] = useState(\"\")\n\n  const [chatIndex,setChatIndex] = useState(0)\n\n  \n\n  const chatArr =[\n    {emoji:\"frog\",\n      chat : \"How do I get better at React?\"},\n\n    {emoji:\"oct\",\n      chat :\"Just build something !\"},\n\n    {emoji:\"frog\",\n    chat :\"Okay ! What should I build ?\"},\n\n    {emoji:\"oct\",\n      chat : \"IDK, Just google it..\"},\n    \n    {emoji:\"frog\",\n    chat :\"Oh, this github profile looks cool !\"},\n\n    {emoji:\"oct\",\n      chat : \"Send me the link ?\"},\n    \n    {emoji:\"frog\",\n    chat : \"https://github.com/vaishnavipy?tab=repositories\"}\n\n  \n    ]\n\n    const parentVariant ={\n     animate:{},\n     initial:{},\n     \n    }\n\n    const circle={\n      initial :{scale:0.2},\n      animate:{scale:[0.4,0.6,0.8,1]}\n    \n    }\n\n \n    function populate(){\n\n      setChatDiv(chatArr.map((item,index)=>{\n\n        //First time bounce effect\n        if(chatIndex == 0 && index == chatIndex){\n\n          return(\n            <Fragment>\n            <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{\n              type: \"spring\",\n              stiffness: 260,\n              damping: 20\n            }}\n            className=\"grid\"\n          >\n           \n            <div className=\"icon\">üê∏</div>\n            <div key={index} className=\"frog-chat chat\">{item.chat}</div>\n            <div></div>\n          </motion.div>\n         \n          <motion.div className=\"load-container left\" animate=\"animate\" initial=\"initial\" variants={parentVariant}   transition={{staggerChildren: 0.3,delayChildren: 0.2,duration:0.2}}>\n             <motion.div className=\"circle\" variants={circle}   transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n             <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n             <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}> </motion.div>\n           </motion.div>\n            </Fragment>\n         \n          )\n\n        }\n\n        //Fill in the normal chat\n        if(index < chatIndex){\n\n          if(item.emoji == \"frog\"){\n\n        return(  <div  className=\"grid\" >\n          <div className=\"icon\">üê∏</div>\n          <div key={index} className=\"frog-chat chat\">{item.chat}</div>\n          <div></div>\n        </div>)\n\n        }\n        else{\n        \n          return( \n            <div className=\"grid\" >\n                <div></div>\n                <div key={index} className=\"oct-chat chat\">{item.chat}</div>\n                <div className=\"icon\">üêô</div>\n              </div>)\n\n        }\n\n\n        }\n        //Attach a animated loader with every conversation, and remove it when you render next time\n        if(index == chatIndex && chatIndex != chatArr.length){\n          let marginClass;\n          item.emoji == \"frog\" ?  marginClass=\"right\" :marginClass=\"left\";\n          return ( <motion.div className={`load-container ${marginClass}`} animate=\"animate\" initial=\"initial\" variants={parentVariant}   transition={{staggerChildren: 0.3,delayChildren: 0.2,duration:2}}>\n          <motion.div className=\"circle\" variants={circle}   transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n          <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}></motion.div>\n          <motion.div className=\"circle\" variants={circle}  transition={{repeat:Infinity,repeatType:\"reverse\",duration:2}}> </motion.div>\n        </motion.div>)\n        }\n      }) \n      \n      ) \n      setChatIndex(prevCount => prevCount+1)\n\n    }\n\n    useEffect(()=>{\n      \n      //Because we want the first chat to bounce first time, we call index 1 two times, without little time out \n      if(chatIndex ==1){\n        setTimeout(populate,200)\n      }\n      \n      //We want first index to have bounce effext, only at component mount, rest of the time the time-out is the sames\n      else if(chatIndex < 8){\n          console.log(chatIndex)\n        setTimeout(populate,1500)\n       \n        //To make animation repeat , set chatIndex to 0\n        }else if(chatIndex==8){\n          setChatIndex(0)\n        }\n      \n      \n    },[chatIndex])\n\n\n  return (\n    \n    <div className=\"main-container\">\n      \n   {chatDiv}\n  \n    </div>\n   \n  );\n}\n\nexport default App;\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":3,"column":18,"nodeType":"31","messageId":"32","endLine":3,"endColumn":27},{"ruleId":"33","severity":1,"message":"34","line":55,"column":42,"nodeType":"35","messageId":"36","endLine":55,"endColumn":44},{"ruleId":"37","severity":1,"message":"38","line":58,"column":22,"nodeType":"39","messageId":"40","endLine":58,"endColumn":24},{"ruleId":"37","severity":1,"message":"38","line":58,"column":36,"nodeType":"39","messageId":"40","endLine":58,"endColumn":38},{"ruleId":"37","severity":1,"message":"38","line":92,"column":25,"nodeType":"39","messageId":"40","endLine":92,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":115,"column":18,"nodeType":"39","messageId":"40","endLine":115,"endColumn":20},{"ruleId":"37","severity":1,"message":"41","line":115,"column":44,"nodeType":"39","messageId":"40","endLine":115,"endColumn":46},{"ruleId":"37","severity":1,"message":"38","line":117,"column":22,"nodeType":"39","messageId":"40","endLine":117,"endColumn":24},{"ruleId":"37","severity":1,"message":"38","line":134,"column":20,"nodeType":"39","messageId":"40","endLine":134,"endColumn":22},{"ruleId":"37","severity":1,"message":"38","line":144,"column":27,"nodeType":"39","messageId":"40","endLine":144,"endColumn":29},{"ruleId":"42","severity":1,"message":"43","line":149,"column":7,"nodeType":"44","endLine":149,"endColumn":18,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'useSpring' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'populate'. Either include it or remove the dependency array.","ArrayExpression",["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [chatIndex, populate]",{"range":"51","text":"52"},[4410,4421],"[chatIndex, populate]"]